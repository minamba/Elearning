@model  ELearning.Models.SubchapterWithCommentsAndReply


@{ 
    string video = Model.CurrentSubchapter.url_video;
    var subchapter = Model.CurrentSubchapter;
    var chapter_id = Model.CurrentSubchapter.chapter_id;
    var subchapter_id = Model.CurrentSubchapter.id;
}

<div class="embed-responsive embed-responsive-16by9 mx-auto my-auto"  @Model.DisplayVideo(@subchapter) >
    <div class="video-frame"  oncontextmenu="return false" id="zozo">
        <video class="shadow-lg my-auto w-100 " id="currentVideo" controls controlsList="nodownload">
            @*<source class="" src="@Url.Content("~/content/Video/" + @Model.CurrentSubchapter.url_video)" type="video/mp4" />*@
            <source src="@Url.Content("http://vps64363.lws-hosting.com/Video/" + @Model.CurrentSubchapter.url_video +"#t="+@Model.video.time_start)" type="video/mp4" />
        </video>
    </div>
</div>



<!--SCIRPT TO GET VIDEO TIMESPAMP-->
<script>
    var vid = document.getElementById("currentVideo");
    var url_vid = "@video";

    vid.onpause = function () {
       
        console.log("le current time est : " + url_vid);
        $.ajax({
            type: "POST",
            url: "/Subchapter_/PushCurrentVideoTime",
            contentType: "application/json; charset=utf-8",
            data: '{"currentTime":"' + Math.round(vid.currentTime) + '","url_video":"' + url_vid + '","duration":"' + Math.round(vid.duration) + '"}',
            dataType: "json",
            success: function (result, status, xhr) {
                console.log(result);
            }
        });
    }
</script>
<!---->

<!--VIDEO ENDED-->
<script type='text/javascript'>
    document.getElementById('currentVideo').addEventListener('ended', myHandler, false);
    document.getElementById('currentVideo').addEventListener('ended', myHandler2, false);
    var vidEnd = document.getElementById("currentVideo");
    var url_vid = "@video";
    var subchap_id = "@subchapter_id";
    var chap_id = "@chapter_id";
    function myHandler(e) {
        // What you want to do after the event
        console.log("fin de la video");
        $.ajax({
            type: "POST",
            url: "/Subchapter_/PushCurrentVideoFinished",
            contentType: "application/json; charset=utf-8",
            data: '{"currentTime":"' + Math.round(vidEnd.currentTime) + '","url_video":"' + url_vid + '","duration":"' + Math.round(vidEnd.duration) + '","subchapter_id":"' + subchap_id + '","chapter_id":"' + chap_id + '"}',
            dataType: "json",
            success: function (result, status, xhr) {
                console.log("merde");
                console.log(result);
            }
        });
    }
    function myHandler2(e) {
        setInterval(function () {
            console.log("fin de la video 2");
            $.ajax({
                type: "POST",
                url: "/Subchapter_/RechargedProgress",
                contentType: "application/json; charset=utf-8",
                data: '{"currentTime":"' + Math.round(vidEnd.currentTime) + '","duration":"' + Math.round(vidEnd.duration) + '","subchapter_id":"' + subchap_id + '"}',
                dataType: "json",
                success: function (result, status, xhr) {
                }
            });
        }, 3000);

        //$(".loadProgressBar").click(function (e) { //obligé d'utiliser une classe pour que tous les elements soit pris en compte. si j'utilise un id="blabla" dans une boucle, il va prendre que le premier element
        //    e.preventDefault();
        //    var url = $(this).data("url3");
        //    console.log("url information" + url);
        //    $("#showComments").load(url);
        //});
    }

</script>


<script>

    const scroll = document.getElementById('video');
    const player = document.querySelector('.player');
    const video = player.querySelector('.viewer');
    const progress = player.querySelector('.progress');
    const progressBar = player.querySelector('.progress__filled');
    const toggle = player.querySelector('.toggle');
    const skipButtons = player.querySelectorAll('[data-skip]');
    const ranges = player.querySelectorAll('.player__slider');


    //build out functions
    function togglePlay() {
        const method = video[video.paused ? 'play' : 'pause']();
        // if (video.paused) {
        // 	video.play();
        // }else{
        // 	video.pause();
        // }
    }

    function updateButton() {
        const icon = this.paused ? '►' : '❚ ❚';
        //console.log('update button');
        toggle.textContent = icon;
    }

    function skip() {
        video.currentTime += parseFloat(this.dataset.skip);
        //console.log(this.dataset.skip);
    }

    function handleRangeUpdate() {
        video[this.name] = this.value;
        //console.log(this.value);
        //console.log(this.name);
    }

    function handleProgress() {
        const percent = (video.currentTime / video.duration) * 100;
        progressBar.style.flexBasis = `${percent}%`;
    }

    function scrub(e) {
        //scrub in the progress bar front or back
        const scrubTime = (e.offsetX / progress.offsetWidth) * video.duration;
        video.currentTime = scrubTime;
        //console.log(e)	
    }

    function scrollPage() {
        let SuperScroll = window.pageYOffset;
        //console.log(SuperScroll);
        if (SuperScroll > 500) {
            //console.log('+++++++WORKS+++++++');
            scroll.classList.add('is-scroll');
        }
        if (SuperScroll < 500) {
            //console.log('+++++++WORKS+++++++');
            scroll.classList.remove('is-scroll');
        }



    }
    //hook up the event listeners;
    window.addEventListener('scroll', scrollPage);

    video.addEventListener('click', togglePlay);
    video.addEventListener('play', updateButton);
    video.addEventListener('pause', updateButton);
    video.addEventListener('timeupdate', handleProgress);
    toggle.addEventListener('click', togglePlay);
    skipButtons.forEach(button => button.addEventListener('click', skip));

    ranges.forEach(range => range.addEventListener('change', handleRangeUpdate));
    ranges.forEach(range => range.addEventListener('mousemove', handleRangeUpdate));

    let mousedown = false;
    progress.addEventListener('click', scrub);
    progress.addEventListener('mousemove', (e) => mousedown && scrub(e));
    progress.addEventListener('mousedow', () => mousedow = true);
    progress.addEventListener('mouseup', () => mousedow = false);
</script>



@model ELearning.Models.RegisterViewModel
@{
    Layout = "~/Views/Shared/_LayoutLogin.cshtml";
}

<script>
    //fonction qui me permet d'afficher ou de cacher le mot de passe
    $(function () {
        var b = false;
        $("#showPass").click(function () {
            //var bpass = b;
            console.log();
            var checked = $(this).click;
            if (!b) {
                console.log('jai cliqué');
                $("#password").attr("type", "text");
                $("#eyeColor").attr("style", "color:#18A2B8");
                b = true;
            } else {
                $("#password").attr("type", "password");
                $("#eyeColor").attr("style", "color:white");
                b = false;
                //eye = "color:white";
            }
        });
    });

</script>


<head>
    @if (Model.message != null)
    {
        var m = new MvcHtmlString(Model.message);
        <script>
            window.onload = function () {
                alert("@m");
                 window.location.href = "@Url.Action("Login")";
            };
        </script>
    }
</head>





<h1 class=" col-lg-12 col-md-12 col-12 animated bounceInDown textmargin text-center text-white" style="font-size:8vw;"><b class="text-info">I</b>nscription</h1>

<div class="container-fluid col-10 col-md-10 col-lg-7 bg-dark" style="opacity:0.8">
    <div class=" container text-white" data-aos="flip-right">


                @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    <h4 class="text-white pt-3">Créer un nouveau compte.</h4>
                    <hr class="hrColor" />
                    @Html.ValidationSummary("", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(m => m.LastName, new { @class = "control-label" })
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.LastName, new { @class = "form-control" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.FirstName, new { @class = "control-label" })
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Email, new { @class = "control-label" })
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                        </div>
                    </div>


                    <div class="form-group">
                        @Html.LabelFor(model => model.SelectedSexe, "Sexe", htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            @Html.DropDownListFor(model => model.SelectedSexe, new SelectList(Model.ListSexe, "Value", "Text"), "Selectionner votre sexe", htmlAttributes: new { @class = "form-control" })
                            @*@Html.ValidationMessageFor(model => model.SelectedSexe, "", new { @class = "text-danger" })*@
                        </div>
                    </div>



                    <div class="form-group">
                        @Html.LabelFor(model => model.SelectedGroupe, "Classe", htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            @Html.DropDownListFor(model => model.SelectedGroupe, new SelectList(Model.ListGroupes, "Value", "Text"), "Selectionner votre classe", htmlAttributes: new { @class = "form-control" })
                            @*@Html.ValidationMessageFor(model => model.SelectedGroupe, "", new { @class = "text-danger" })*@
                        </div>
                    </div>




                    <div class="form-group">
                        @Html.LabelFor(m => m.Password, new { @class = "control-label" })
                        <div class="input-group">
                            @Html.PasswordFor(m => m.Password, new { @class = "form-control ", id = "password" })
                            @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                            <div class="input-group-append">
                                <div class="input-group-text"><i class="far fa-eye float-lg-right" id="showPass"></i></div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.ConfirmPassword, new { @class = "control-label" })
                        <div class="input-group">
                            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <input type="submit" class="btn btn-info" value="S’inscrire" />
                            &nbsp;
                            @Html.ActionLink(" | Connexion", "Login")
                        </div>
                    </div>

                     <p class="pb-3"> </p>
                }

                @section Scripts {
                    @Scripts.Render("~/bundles/jqueryval")
                }

    </div>
</div>


<!--script effet du fade sur les image(arrivage des images petit a petit)-->
<script src="~/Scripts/aos.js"></script>
<script>
    AOS.init({
        easing: 'ease-in-out-sine'
    });
</script>